elif Options == "Add API":
    url = streamlit.text_input("Enter your API URL:", "")
    if url == "":
        streamlit.write("")
    else:
        try:
            response = requests.get(url)
            if response.status_code == 200:
                API_Object = pd.DataFrame(response.json())
            else:
                streamlit.error(f"üö® Failed to fetch data: {response.status_code}")  

            if "show_data" not in streamlit.session_state:
                streamlit.session_state["show_data"] = False

            elif API_Object is not None:
                streamlit.success("Server response was successful!")
                if streamlit.checkbox("Preview object"):
                    streamlit.write(API_Object.head())  

                Save_options = streamlit.selectbox(
                    "Save your file:",
                    ["Select format?", "CSV", "Excel"]
                )

                if Save_options != "Select format?":
                    file_name_input = streamlit.text_input("Enter a filename (without extension):", "api_data")

                    if streamlit.button("Save"):
                        save_path = os.path.join("ModelFlow", "data-config", "saved-files")
                        os.makedirs(save_path, exist_ok=True)

                        if Save_options == "CSV":
                            full_path = os.path.join(save_path, f"{file_name_input}.csv")
                            API_Object.to_csv(full_path, index=False)

                        elif Save_options == "Excel":
                            full_path = os.path.join(save_path, f"{file_name_input}.xlsx")
                            API_Object.to_excel(full_path, index=False)

                        streamlit.success(f"‚úÖ File saved as `{file_name_input}` at manage-files")
                else:
                    streamlit.session_state["disable"] = True
        except Exception as e:
            streamlit.error(f"‚ùå Error: {str(e)}")
